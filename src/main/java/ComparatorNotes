 max heap -
     private static class MedianComparator implements Comparator<Integer> {
        @Override
        public int compare(Integer o1, Integer o2) {
            return o2 - o1;
        }
    }
    PriorityQueue<Integer> lowers = new PriorityQueue<Integer>(new MedianComparator());



min heap -
        Comparator<String> stringLengthComparator = new Comparator<String>() {
            @Override
            public int compare(String w1, String w2) {
                return count.get(w1).equals(count.get(w2)) ? w2.compareTo(w1) : count.get(w1) - count.get(w2) ;
            }
        };

        PriorityQueue<String> heap = new PriorityQueue<String>(stringLengthComparator);



ascending order in array -
        Collections.sort(list, new Comparator() {
            public int compare(Object o1, Object o2) {
                Integer v1 = (Integer) ((Map.Entry) o1).getValue();
                Integer v2 = (Integer) ((Map.Entry) o2).getValue();
                return v1.compareTo(v2);
            }
        });


 list = {ArrayList@442}  size = 4
 0 = {HashMap$Node@446} "sunny" -> "2"
 1 = {HashMap$Node@447} "day" -> "2"
 2 = {HashMap$Node@444} "the" -> "3"
 3 = {HashMap$Node@445} "is" -> "3"