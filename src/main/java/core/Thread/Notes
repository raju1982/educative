Every program runs in it's own process.
Process can spawn off multiple threads.


wait()- thread give up the lock and go to sleep until some other thread enters the same monitor and calls notify().
notify()-wakes up one single thread that called wait() on the same object. Does not actually give up a lock on a resource.




i++ -> read value, increment value and write value. (three operations).
thread B increment is lost cause it operated on stale data.

Three type of complication can arise from multithreading -

Thread interference - different threads access same data. (Interference happens when two operations, running in different threads, but acting on the same data, interleave. This means that the two operations consist of multiple steps, and the sequences of steps overlap.)
AND
Memory Consistency Errors - A thread sees a stale(inconsistent) value of variable. (memory writes by one specific statement are not visible to another specific statement.)

Race condition in Java occurs in a multi-threaded environment when more than one thread try to access modify a shared resource at the same time.
Volatile variables reduces the risk of memory consistency errors
A volatile variable is one whose value is always written to and read from "main memory". Each thread has its own cache in Java. The volatile variable will not be stored on a Thread cache.
Synchronization avoids memory consistence errors caused due to inconsistent view of shared memory.


Locking variables correctly can eliminate thread interference and memory consistency errors but it slows down performance and can lead to thread contention issue (starvation, livelock, deadlock)


Thread contentions issue -

In any multi-threaded application, where you have multiple threads vying for the access over the shared resources you may come across a situation where a thread (or a bunch of threads) is unable to gain regular access to shared resources and is unable to make progress. This situation is known as thread starvation.
Thread starvation in multi-threading may happen because other “greedy” threads are gaining the lock and access to the shared resource, resulting in a thread (or a bunch of threads) getting starved of access to shared resources and CPU time

Deadlock in multi-threading describes a situation where two or more threads are blocked forever, waiting for each other.

Livelock in Java multi-threading is a situation where two or more threads are acting on a response to an action of each other and not able to make any progress because of that.
How livelock is different from deadlock in Java multi-threading is that in case of deadlock threads get blocked whereas in case of livelock threads are active but busy responding to each other thus not making any progress.





public class ArrayBlockingQueue<E> extends AbstractQueue<E> implements BlockingQueue<E>, Serializable
A bounded blocking queue backed by an array. This queue orders elements FIFO (first-in-first-out).
Insert - put(e)
Remove - take()

public class CopyOnWriteArrayList<E> extends Object implements List<E>, RandomAccess, Cloneable, Serializable
A thread-safe variant of ArrayList in which all mutative operations (add, set, and so on) are implemented by making a fresh copy of the underlying array.

public class CopyOnWriteArraySet<E> extends AbstractSet<E> implements Serializable
A Set that uses an internal CopyOnWriteArrayList for all of its operations. Thus, it shares the same basic properties:

public class ConcurrentHashMap<K,V> extends AbstractMap<K,V> implements ConcurrentMap<K,V>, Serializable
A hash table supporting full concurrency of retrievals and high expected concurrency for updates.

public interface ConcurrentMap<K,V> extends Map<K,V>
A Map providing thread safety and atomicity guarantees.