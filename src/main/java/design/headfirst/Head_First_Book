always implements equals method with a class, specially when search is needed.


use ENUM instead of string -
  no issues with lowercase or uppercase
  no issue of null , empty string, spelling error


if ((builder != null) && (!builder.equals("")) &&
                    (!builder.equalsIgnoreCase(guitar.getBuilder())))

if (guitar.getBackWood() != searchGuitar.getBackWood())



user was passing guitarspec and not guitar object , create new guitar spec class (composition relationship with guitar class)


in order to add one property in guitarspec, we need to update guitar (constructor) and inventory (search), this is bad.


classes should be less dependent on each other, update the design to achieve this.

open-close principle - class should be open for extension close for modification.

encapsulation, composition and delegation

find the parts that changes often and try and separate them from the parts of your application that don't change.

encapsulate what varies.

Create class for all noun (person, place or thing)

Verb usually are methods

when you have a set of properties that vary across your objects, use a collection, like a Map, to store those properties dynamically.

subclasses must be substitutable for their base type. (LSP)

cohesion - look through the methods of your class do they all relate to the name of your class.

single responsibility principle - one reason to change - cohesion
single responsibility principle applies to both classes and method.

highly cohesive software is loosely coupled.

code to interface.

if a code violate LSP, consider using delegation, composition or aggregation.

composition lets you choose a behaviour from a family of behaviour often via several implementation of an interface.

if value does not exists in Map , throw an IllegalArgumentException instead of returning null value.

do not expose internal implementation to client.
addStation(Station) is bad
addStation(String) is good

use inheritance when one object behaves like another, rather than just when the IS-A relationship applies.
rectangle - square

always override equals and toString method.

Program to interface not implementation.

Always program against the interface provided by other folks and for your own code provide a clean interface.
This way code will be loosely coupled.
Implementation change can be done easily without affecting the client code.

Principle of least knowledge aka Demetreâ€™s Law -
In any class you write only make method call to -
Object created inside class.
Object passed in as parameter to method of your class.
Each unit should have limited knowledge unit about other unit.



Classes should be open for extension -
Inheritance
delegation
composition
Delegation can be an alternative to inheritance.


Delegation means that you use an object of another class as an instance variable, and forward messages to the instance.

// Java program to illustrate delegation
class RealPrinter {
    // the "delegate"
    void print()
    {
        System.out.println("The Delegate");
    }
}

class Printer {
    // the "delegator"
    RealPrinter p = new RealPrinter();

    // create the delegate
    void print()
    {
        p.print(); // delegation
    }
}

public class Tester {
    // To the outside world it looks like Printer actually prints.
public static void main(String[] args)
    {
        Printer printer = new Printer();
        printer.print();
    }
}



// Java program to illustrate Inheritance
class RealPrinter {
    // base class implements method
    void print()
    {
        System.out.println("Printing Data");
    }
}
// Printer Inheriting functionality of real printer
    class Printer extends RealPrinter {
    void print()
    {
        super.print(); // inside calling method of parent
    }
}

public class Tester {
    // To the outside world it looks like Printer actually prints.
public static void main(String[] args)
    {
        Printer printer = new Printer();
        printer.print();
    }
}






composition vs inheritance

Composition = has A , inheritance = is A
Composition refers defining behavior by the member variable a class include.
Inheritance refers to defining behaviour by the interface or classes that a class inherit from.

Now let's say ClassA implementation is changed like below, a new method bar() is added.

public class ClassA {
	public void foo(){
	}
	public int bar(){
		return 0;
	}
}

class ClassB extends ClassA{
	public void bar(){
	}
}

As soon as you start using new ClassA implementation, you will get compile time error in ClassB as The return type is incompatible with ClassA.bar(). The solution would be to change either the superclass or the subclass bar() method to make them compatible.

If you would have used Composition over inheritance, you will never face this problem. A simple example of ClassB implementation using Composition can be like below.

class ClassB{
	ClassA classA = new ClassA();
	public void bar(){
		classA.foo();
		classA.bar();
	}
}


There is no access control in inheritance whereas access can be restricted in composition. We expose all the superclass methods to the other classes having access to subclass. So if a new method is introduced or there are security holes in the superclass, subclass becomes vulnerable. Since in composition we choose which methods to use, it's more secure than inheritance. For example, we can provide ClassA foo() method exposure to other classes using below code in ClassB.


class ClassB {
	ClassA classA = new ClassA();

	public void foo(){
		classA.foo();
	}

	public void bar(){
	}
}

This is one of the major advantage of composition over inheritance.




For any publicly exported method always validate the input parameters to the method.

It is critical to check the validity of constructor parameters to prevent the construction of an object that violates its class invariants.

anytime you write a method or constructor that assigns a client-provided object to an internal data structure there exists the possibility
of the client changing the passed-in object at a later time. The fix for the DefensiveClass class is to create a copy of the list of
passed-in keys to the constructor.

Don't return a reference to an internal field that is mutable and can be modified by an untrusted client. This is a defensive measure against attacks.
Defensive copying may be unneeded if the class trusts its clients or copying is expensive. Continuing with our DefensiveClass we can write a getter
for the cryptoKeys as follows:

    List<String> getKeys() {
        // Return an unmodifiable view to the internal data-structure
        return Collections.unmodifiableList(cryptoKeys);
    }


Method called from constructor are generally declared final. if a constructor calls a non-final method, a subclass may redefine that method with surprising or undesirable results.
public class Test extends Extension {

    Test() {
        super();
    }
   public void call(){
        System.out.println("Test call");
    }

    public static void main(String[] args){
        Extension boring = new Test();
    }


}

class Extension{

    public void call(){
        System.out.println("extension call");
    }

    Extension(){
        call();
        System.out.println("extension");
    }

}


Avoid defining methods with more than four parameters.

Define parameter types using interfaces rather than classes.

Exercise caution when overloading methods as it can produce results not anticipated by the programmer.
  void print(Set<String> collection) {
        System.out.println("Method deals with sets only");
    }

    void print(Collection<String> collection) {
        System.out.println("Method deals with collections only");
    }

    Which print() method would be invoked for the following snippet:
        Set<String> set = new HashSet<>(keys);
            Collection<String> ref = set;
            // Which print method is invoked?
            print(ref);

Even though the runtime type of the variable ref is Set but the compile time type is Collection and the method matching is performed at compile time
therefore the print method which takes in a collection type is invoked when the program is run.


Exercise caution when using the varargs facility in performance critical environments. Every invocation of a varargs method internally causes an
array to be allocated and initialized.


Return empty arrays or Collections but not null from methods. If the developer invoking the method as a client forgets to check for the null case,
it will cause his or her code to fail with a null pointer exception.


Use doc comments extensively for documentation. Consider doc comments mandatory for every exported classes, interfaces, methods, fields, constructors etc.
Javadoc is the most effective way to document your API.


Strive to minimize the scope of a local variable The best way for minimizing the scope of a local variable is to declare it where it is first used.


Don't use float and double types where exact results are required.Use BigDecimal, int, or long instead.


For-each loops should be preferred to for loops when iterating over collections. If a custom type consists of a group of elements, consider having it implement Iterable interface.


Applying == operator on boxed primitives is almost always wrong.


Mixing primitive types and their corresponding object types can result in unintended boxing/unboxing operations causing decreased performance.


Favor the use of interfaces rather than classes to refer to objects. If appropriate interface types exist, then parameters, return values, variables, and fields should all be declared using interface types.
This allows decoupling code from implementation.


Use checked exceptions for conditions from which the caller can reasonably be expected to recover. Checked exceptions force the programmer to deal with exceptional conditions, greatly enhancing reliability.

Runtime exceptions should be used to indicate programming errors only.

Always declare checked exceptions individually, and document precisely the conditions under which each one is thrown using the Javadoc @throws tag.


class Unsafe {

    Boolean flag;


    public synchronized void setFlag(Boolean flag) {
        this.flag = flag;
    }

    // Read path is unsynchronized and a thread reading
    // the flag may never see an updated value by another thread
    public Boolean getFlag() {
        return flag;
    }

}
Synchronizing only the write path isn't sufficient for thread-safety. In fact, synchronization has no effect unless both read and write operations are synchronized.



private static volatile int nextID = 0;
   public static int generateID() {
       nextID = nextID + 1;
       return nextID;
}
It's easy to see that the rewritten method needs to be synchronized and volatile isn't enough. Multiple threads calling into the method can end up reading the same value of nextID and incrementing it, resulting in two identical IDs.



