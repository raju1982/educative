Game -
private List<Move> movesPlayed;

private void initialize(Player p1, Player p2) {
        players[0] = p1;
        players[1] = p2;

        board.resetBoard();

        if (p1.isWhiteSide()) {
            this.currentTurn = p1;
        } else {
            this.currentTurn = p2;
        }

        movesPlayed.clear();
}

    public boolean playerMove(Player player, int startX, int startY, int endX, int endY) {
        Box startBox = board.getBox(startX, startY);
        Box endBox = board.getBox(startY, endY);
        Move move = new Move(startBox, endBox);
        return this.makeMove(move, player);
    }


private boolean makeMove(Move move, Player player) {
        Piece sourcePiece = move.getStart().getPiece();
        // valid player
        if (player != currentTurn) {
            return false;
        }

        if (sourcePiece == null) {
             return false;
         }

        if (sourcePiece.isWhite() != player.isWhiteSide()) {
            return false;
        }

        // valid move?
        if (!sourcePiece.canMove(move.getStart(), move.getEnd())) {
            return false;
        }

        // kill?
        Piece destPiece = move.getStart().getPiece();
        if (destPiece != null) {
            destPiece.setKilled(true);
            move.setPieceKilled(destPiece);
        }


        // store the move
        movesPlayed.add(move);

        // move piece from the stat box to end box
        move.getEnd().setPiece(move.getStart().getPiece());
        move.getStart().setPiece(null);

        if (destPiece != null && destPiece instanceof King) {
            if (player.isWhiteSide()) {
                this.setStatus(GameStatus.WHITE_WIN);
            } else {
                this.setStatus(GameStatus.BLACK_WIN);
            }
        }

        // set the current turn to the other player
        if (this.currentTurn == players[0]) {
            this.currentTurn = players[1];
        } else {
            this.currentTurn = players[0];
        }

        return true;
    }

Move -
Move(Box start, Box end)

Player -
Player(Person person, boolean whiteSide)

Box -
Box(int x, int y, Piece piece)

Board -
Box[][] boxes;

Piece - abstract class
private boolean killed = false;
private boolean white = false;
boolean canMove(Box start, Box end) <abstaract method>

King extends Piece -
boolean canMove(Box start, Box end)

public boolean canMove(Box start, Box end) {
        // we can't move the piece to a box that has a piece of the same color
        if(end.getPiece().isWhite() == this.isWhite()) {
            return false;
        }

        int x = Math.abs(start.getX() - end.getX());
        int y = Math.abs(start.getY() - end.getY());
        if(x + y == 1) {
            // check if this move will not result in king being attacked, if so return true
            return true;
        }

        //return this.isValidCastling(board, start, end);
        return false;
    }