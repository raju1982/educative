public enum BookStatus {
  AVAILABLE,
  RESERVED,
  LOANED
}

public enum ReservationStatus{
  WAITING,
  PENDING,
  CANCELED,
  COMPLETED
}

public class Constants {
  public static final int MAX_BOOKS_ISSUED_TO_A_USER = 5;
  public static final int MAX_LENDING_DAYS = 10;
}

public class Member {
  private Date dateOfMembership;
  private int totalBooksCheckedout;

  //total no. of books checked out by user
  public int getTotalBooksCheckedout();

  public boolean reserveBookItem(BookItem bookItem);

  private void incrementTotalBooksCheckedout();

  public boolean checkoutBookItem(BookItem bookItem) {
    //valide no. of books issued to memeber.
    if(this.getTotalBooksCheckedOut() >= Constants.MAX_BOOKS_ISSUED_TO_A_USER ) {
      ShowError("The user has already checkedout maximum number of books");
      return false;
    }
    BookReservation bookReservation = BookReservation.fetchReservationDetails(bookItem.getBarcode());

    if( bookReservation != null &&  bookReservation.getMemberId() != this.getId() ) {
      // book item has a pending reservation from another user
        ShowError("This book is reserved by another member");
        return false;
      } else if( bookReservation != null ) {
      // book item has a pending reservation from the give member, update it
      bookReservation.updateStatus(ReservationStatus.COMPLETED);
    }

    //
    if(!bookItem.checkout()) {
      return false;
    }

    this.incrementTotalBooksCheckedout();
    return true;
  }

  public void returnBookItem(BookItem bookItem) {
    this.checkForFine();
    BookReservation bookReservation = BookReservation.fetchReservationDetails(bookItem.getBarcode());
    if(bookReservation != null) {
      // book item has a pendening reservation
      bookItem.updateBookItemStatus(BookStatus.RESERVED);
      //???  [ bookReservation.updateStatus(ReservationStatus.WAITING); ->  update bookReservationList
      bookReservation.sendBookAvailableNotification();
    }
    bookItem.updateBookItemStatus(BookStatus.AVAILABLE);
  }

  public bool renewBookItem(BookItem bookItem) {
    this.checkForFine();
    BookReservation bookReservation = BookReservation.fetchReservationDetails(bookItem.getBarcode());
    if( bookReservation != null && bookReservation.getMemberId() != member.getMemberId() ) {
      // book item has a pendening reservation from another member
      ShowError("This book is reserved by another member");
      member.decrementTotalBooksCheckedout();
      bookItem.updateBookItemState(BookStatus.RESERVED);
      bookReservation.sendBookAvailableNotification();
      return false;
    } else if( bookReservation != null ){
      // book item has a pendening reservation from this member
      bookReservation.updateStatus(ReservationStatus.COMPLETED);
    }
    BookLending.lendBook(bookItem.getBarCode(), this.getMemberId());
    bookItem.updateDueDate(LocalDate.now().plusDays(Constants.MAX_LENDING_DAYS));
    return true;
  }
}


public enum ReservationStatus{
  WAITING,
  PENDING,
  CANCELED,
  COMPLETED
}

public class BookReservation {
  private Date creationDate;
  private ReservationStatus status;
  private String bookItemBarcode;
  private String memberId;
  //String bookItemBarcode  String memberId
  private Static volatile List<String, String> bookReservationList;

  private BookReservation(String barcode){
    this.bookItemBarcode = barcode;
    this.memberId = bookReservationList.get(barcode);
  }


  public static BookReservation fetchReservationDetails(String barcode){


  }


  public static BookReservation fetchReservationDetails(String bookItemBarcode){
    if(List.contains(bookItemBarcode)){
        return BookReservation();
    }
    else{
        return null;
    }
  }

  //PENDING, COMPLETED
  updateStatus(ReservationStatus status){

  }

  sendBookAvailableNotification();
}

public class BookLending {
  private Date creationDate;
  private Date dueDate;
  private Date returnDate;
  private String bookItemBarcode;
  private String memberId;

  public static void lendBook(String barcode, String memberId);
  public static BookLending fetchLendingDetails(String barcode);
}


public abstract class Book {
  private String ISBN;
  private String title;
  private String subject;
  private String publisher;
  private String language;
  private int numberOfPages;
  private List<Author> authors;
}

public enum BookStatus {
  AVAILABLE,
  RESERVED,
  LOANED
}

public class BookItem extends Book {
  private String barcode;
  private boolean isReferenceOnly;
  private Date borrowed;
  private Date dueDate;
  private BookStatus status = AVAILABLE;

  public updateBookItemStatus(BookStatus bookStatus){}

  public BookItem(String barcode, boolean isReferenceOnly){}

  public boolean checkout() {
    if(bookItem.getIsReferenceOnly()) {
      ShowError("This book is Reference only and can't be issued");
      return false;
    }


    this.updateBookItemStatus(BookStatus.LOANED);
    return true;
  }
}















public interface Search {
  public List<Book> searchByTitle(String title);
  public List<Book> searchByAuthor(String author);
  public List<Book> searchBySubject(String subject);
  public List<Book> searchByPubDate(Date publishDate);
}

public class Catalog implements Search {
  private HashMap<String, List<Book>> bookTitles;
  private HashMap<String, List<Book>> bookAuthors;
  private HashMap<String, List<Book>> bookSubjects;
  private HashMap<String, List<Book>> bookPublicationDates;

  public List<Book> searchByTitle(String query) {
    // return all books containing the string query in their title.
    return bookTitles.get(query);
  }

  public List<Book> searchByAuthor(String query) {
    // return all books containing the string query in their author's name.
    return bookAuthors.get(query);
  }
}