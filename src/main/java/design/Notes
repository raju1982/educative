Design the data structures for a generic deck of cards. Explain how you
would subclass the data structures to implement blackjack.






Questions -

Imagine you have a call center with three levels of employees: respondent
manager, and director. An incoming telephone call must be first allocated
to a respondent who is free. If the respondent can't handle the call, he or
she must escalate the call to a manager. If the manager is not free or not
able to handle it, then the call should be escalated to a director. Design
the classes and data structures for this problem. Implement a method
dispatchCall() which assigns a call to the first available employee.

Design a musical jukebox using object-oriented principles.

Design a parking lot using object-oriented principles.

Design the data structures for an online book reader system.

Implement a jigsaw puzzle. Design the data structures and explain an
algorithm to solve the puzzle. You can assume that you have a fitsWith
method which, when passed two puzzle pieces, returns true if the two
pieces belong together.

Explain how you would design a chat server. In particular, provide details
about the various backend components, classes, and methods. What
would be the hardest problems to solve?

Othello is played as follows: Each Othello piece is white on one side and
black on the other. When a piece is surrounded by its opponents on both
the left and right sides, or both the top and bottom, it is said to be captured
and its color is flipped. On your turn, you must capture at least one of your
opponent's pieces. The game ends when either user has no more valid
moves. The win is assigned to the person with the most pieces. Implement
the object-oriented design for Othello.

Explain the data structures and algorithms that you would use to design
an in-memory file system. Illustrate with an example in code where possible.

Design and implement a hash table which uses chaining (linked lists) to
handle collisions.

